const mongoose = require("mongoose");
const { playerCountChildSchema } = require("./boardgame");

const enrichedCollectionSchema = mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  createdAt: { type: Date, expires: process.env.ENRICHED_COLLECTION_TTL },
  yearRegistered: Number,
  avatar: String,
  firstName: String,
  lastName: String,
  stateOrProvince: String,
  country: String,
  totalItems: Number,
  totalPlays: Number,
  lastLoggedPlay: Date,
  lastLogin: Date,
  pubDate: Date,
  tradeRating: Number,
  marketRating: Number,
  items: [
    {
      id: String,
      subtype: String,
      collId: String,
      name: String,
      own: Number,
      prevowned: Number,
      fortrade: Number,
      want: Number,
      wanttoplay: Number,
      wanttobuy: Number,
      wishlist: Number,
      preordered: Number,
      lastModified: Date,
      numPlays: Number,
      numOwned: Number,
      userRating: Number,
      thumbnail: String,
      image: String,
      description: String,
      yearPublished: Number,
      minPlayers: Number,
      maxPlayers: Number,
      recommendedPlayers: Number,
      numPlayersStats: {
        totalVotes: Number,
        playerCount: {
          type: Map,
          of: playerCountChildSchema,
        },
      },
      playerAgeStats: {
        totalVotes: Number,
        playerAge: {
          type: Map,
          of: Number,
        },
      },
      langDependenceStats: {
        totalVotes: Number,
        langDependenceLevels: [
          {
            value: String,
            numVotes: Number,
          },
        ],
      },
      playTime: Number,
      minPlayTime: Number,
      maxPlayTime: Number,
      minAge: Number,
      categories: [{ id: String, value: String }],
      mechanics: [{ id: String, value: String }],
      families: [{ id: String, value: String }],
      expansions: [{ id: String, value: String }],
      implementations: [{ id: String, value: String }],
      designers: [{ id: String, value: String }],
      artists: [{ id: String, value: String }],
      publishers: [{ id: String, value: String }],
      usersRated: Number,
      averageRating: Number,
      bayesAverageRating: Number,
      owned: Number,
      trading: Number,
      wanting: Number,
      wishing: Number,
      numComments: Number,
      numWeights: Number,
      averageWeight: Number,
      subtypeRatings: [
        {
          id: String,
          value: Number,
          name: String,
          friendlyName: String,
          bayesAverage: Number,
        },
      ],
      familyRatings: [
        {
          id: String,
          value: Number,
          name: String,
          friendlyName: String,
          bayesAverage: Number,
        },
      ],
      ratingsBreakdown: {
        1: Number,
        2: Number,
        3: Number,
        4: Number,
        5: Number,
        6: Number,
        7: Number,
        8: Number,
        9: Number,
        10: Number,
      },
      listings: [
        {
          price: Number,
          currency: String,
          condition: String,
          date: Date,
          pricesUsd: Number,
        },
      ],
      numListings: Number,
      numListingsNew: Number,
      numListingsUsed: Number,
      averagePriceNew: Number,
      medianPriceNew: Number,
      maxPriceNew: Number,
      minPriceNew: Number,
      averagePriceUsed: Number,
      medianPriceUsed: Number,
      maxPriceUsed: Number,
      minPriceUsed: Number,
      stdPriceNew: Number,
      stdPriceUsed: Number,
      lastUpdated: Date,
      plays: {
        id: String,
        date: Date,
        quantity: Number,
        length: Number,
        incomplete: Number,
        location: {
          type: String,
          trim: true,
        },
        objectName: String,
        itemId: String,
        objectType: String,
        comments: {
          type: String,
          trim: true,
        },
        players: [
          {
            username: String,
            userId: String,
            name: String,
            startPosition: String,
            color: String,
            score: String,
            new: Number,
            rating: Number,
            win: Number,
          },
        ],
      },
    },
  ],
  ignoredItems: [
    {
      id: String,
      name: String,
    },
  ],

  insights: Map,
  lastUpdated: Date,
});

const EnrichedCollection = mongoose.model(
  "EnrichedCollection",
  enrichedCollectionSchema
);
module.exports = EnrichedCollection;
